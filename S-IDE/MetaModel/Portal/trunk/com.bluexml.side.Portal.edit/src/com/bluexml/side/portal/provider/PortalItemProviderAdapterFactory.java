/*
    Copyright (C) 2007-2011  BlueXML - www.bluexml.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.bluexml.side.portal.provider;

import com.bluexml.side.portal.util.PortalAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PortalItemProviderAdapterFactory extends PortalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PortalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Portal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortalItemProvider portalItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Portal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortalAdapter() {
		if (portalItemProvider == null) {
			portalItemProvider = new PortalItemProvider(this);
		}

		return portalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortalLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortalLayoutItemProvider portalLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortalLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortalLayoutAdapter() {
		if (portalLayoutItemProvider == null) {
			portalLayoutItemProvider = new PortalLayoutItemProvider(this);
		}

		return portalLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Portlet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortletItemProvider portletItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Portlet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortletAdapter() {
		if (portletItemProvider == null) {
			portletItemProvider = new PortletItemProvider(this);
		}

		return portletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortletTypeItemProvider portletTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortletTypeAdapter() {
		if (portletTypeItemProvider == null) {
			portletTypeItemProvider = new PortletTypeItemProvider(this);
		}

		return portletTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletInternal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortletInternalItemProvider portletInternalItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletInternal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortletInternalAdapter() {
		if (portletInternalItemProvider == null) {
			portletInternalItemProvider = new PortletInternalItemProvider(this);
		}

		return portletInternalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortletAttributeItemProvider portletAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortletAttributeAdapter() {
		if (portletAttributeItemProvider == null) {
			portletAttributeItemProvider = new PortletAttributeItemProvider(this);
		}

		return portletAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.HavePortlet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HavePortletItemProvider havePortletItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.HavePortlet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHavePortletAdapter() {
		if (havePortletItemProvider == null) {
			havePortletItemProvider = new HavePortletItemProvider(this);
		}

		return havePortletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PositionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionGroupItemProvider positionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PositionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionGroupAdapter() {
		if (positionGroupItemProvider == null) {
			positionGroupItemProvider = new PositionGroupItemProvider(this);
		}

		return positionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.InstanciatePortletType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanciatePortletTypeItemProvider instanciatePortletTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.InstanciatePortletType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanciatePortletTypeAdapter() {
		if (instanciatePortletTypeItemProvider == null) {
			instanciatePortletTypeItemProvider = new InstanciatePortletTypeItemProvider(this);
		}

		return instanciatePortletTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletAttributeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortletAttributeInstanceItemProvider portletAttributeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletAttributeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortletAttributeInstanceAdapter() {
		if (portletAttributeInstanceItemProvider == null) {
			portletAttributeInstanceItemProvider = new PortletAttributeInstanceItemProvider(this);
		}

		return portletAttributeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.isChildPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected isChildPageItemProvider isChildPageItemProvider;

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.isChildPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createisChildPageAdapter() {
		if (isChildPageItemProvider == null) {
			isChildPageItemProvider = new isChildPageItemProvider(this);
		}

		return isChildPageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (portalItemProvider != null) portalItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (portalLayoutItemProvider != null) portalLayoutItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (portletItemProvider != null) portletItemProvider.dispose();
		if (portletTypeItemProvider != null) portletTypeItemProvider.dispose();
		if (portletInternalItemProvider != null) portletInternalItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (portletAttributeItemProvider != null) portletAttributeItemProvider.dispose();
		if (havePortletItemProvider != null) havePortletItemProvider.dispose();
		if (positionGroupItemProvider != null) positionGroupItemProvider.dispose();
		if (instanciatePortletTypeItemProvider != null) instanciatePortletTypeItemProvider.dispose();
		if (portletAttributeInstanceItemProvider != null) portletAttributeInstanceItemProvider.dispose();
		if (isChildPageItemProvider != null) isChildPageItemProvider.dispose();
	}

}
