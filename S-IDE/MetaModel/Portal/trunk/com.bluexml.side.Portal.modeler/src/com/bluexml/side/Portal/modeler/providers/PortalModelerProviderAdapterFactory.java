/*
    Copyright (C) 2007-2011  BlueXML - www.bluexml.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


/*******************************************************************************
 * This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Boston, MA 02111.
 ******************************************************************************/
package com.bluexml.side.Portal.modeler.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

import com.bluexml.side.portal.util.PortalAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class PortalModelerProviderAdapterFactory extends PortalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortalModelElement} instances.
	 * 
	 * @generated
	 */
	private PortalModelElementModelerProvider portalmodelelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Portal} instances.
	 * 
	 * @generated
	 */
	private PortalModelerProvider portalModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Page} instances.
	 * 
	 * @generated
	 */
	private PageModelerProvider pageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortalLayout} instances.
	 * 
	 * @generated
	 */
	private PortalLayoutModelerProvider portallayoutModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Column} instances.
	 * 
	 * @generated
	 */
	private ColumnModelerProvider columnModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Portlet} instances.
	 * 
	 * @generated
	 */
	private PortletModelerProvider portletModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletType} instances.
	 * 
	 * @generated
	 */
	private PortletTypeModelerProvider portlettypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletInternal} instances.
	 * 
	 * @generated
	 */
	private PortletInternalModelerProvider portletinternalModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.AbstractPortletAttributes} instances.
	 * 
	 * @generated
	 */
	private AbstractPortletAttributesModelerProvider abstractportletattributesModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.Group} instances.
	 * 
	 * @generated
	 */
	private GroupModelerProvider groupModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletAttribute} instances.
	 * 
	 * @generated
	 */
	private PortletAttributeModelerProvider portletattributeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.HavePortlet} instances.
	 * 
	 * @generated
	 */
	private HavePortletModelerProvider haveportletModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PositionGroup} instances.
	 * 
	 * @generated
	 */
	private PositionGroupModelerProvider positiongroupModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.InstanciatePortletType} instances.
	 * 
	 * @generated
	 */
	private InstanciatePortletTypeModelerProvider instanciateportlettypeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.PortletAttributeInstance} instances.
	 * 
	 * @generated
	 */
	private PortletAttributeInstanceModelerProvider portletattributeinstanceModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.portal.isChildPage} instances.
	 * 
	 * @generated
	 */
	private isChildPageModelerProvider ischildpageModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public PortalModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortalModelElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortalModelElementAdapter() {
		if (portalmodelelementModelerProvider == null) {
			portalmodelelementModelerProvider = new PortalModelElementModelerProvider(this);
		}

		return portalmodelelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Portal}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortalAdapter() {
		if (portalModelerProvider == null) {
			portalModelerProvider = new PortalModelerProvider(this);
		}

		return portalModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Page}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPageAdapter() {
		if (pageModelerProvider == null) {
			pageModelerProvider = new PageModelerProvider(this);
		}

		return pageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortalLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortalLayoutAdapter() {
		if (portallayoutModelerProvider == null) {
			portallayoutModelerProvider = new PortalLayoutModelerProvider(this);
		}

		return portallayoutModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Column}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createColumnAdapter() {
		if (columnModelerProvider == null) {
			columnModelerProvider = new ColumnModelerProvider(this);
		}

		return columnModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Portlet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortletAdapter() {
		if (portletModelerProvider == null) {
			portletModelerProvider = new PortletModelerProvider(this);
		}

		return portletModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortletTypeAdapter() {
		if (portlettypeModelerProvider == null) {
			portlettypeModelerProvider = new PortletTypeModelerProvider(this);
		}

		return portlettypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletInternal}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortletInternalAdapter() {
		if (portletinternalModelerProvider == null) {
			portletinternalModelerProvider = new PortletInternalModelerProvider(this);
		}

		return portletinternalModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.AbstractPortletAttributes}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractPortletAttributesAdapter() {
		if (abstractportletattributesModelerProvider == null) {
			abstractportletattributesModelerProvider = new AbstractPortletAttributesModelerProvider(this);
		}

		return abstractportletattributesModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.Group}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGroupAdapter() {
		if (groupModelerProvider == null) {
			groupModelerProvider = new GroupModelerProvider(this);
		}

		return groupModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletAttribute}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortletAttributeAdapter() {
		if (portletattributeModelerProvider == null) {
			portletattributeModelerProvider = new PortletAttributeModelerProvider(this);
		}

		return portletattributeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.HavePortlet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createHavePortletAdapter() {
		if (haveportletModelerProvider == null) {
			haveportletModelerProvider = new HavePortletModelerProvider(this);
		}

		return haveportletModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PositionGroup}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPositionGroupAdapter() {
		if (positiongroupModelerProvider == null) {
			positiongroupModelerProvider = new PositionGroupModelerProvider(this);
		}

		return positiongroupModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.InstanciatePortletType}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInstanciatePortletTypeAdapter() {
		if (instanciateportlettypeModelerProvider == null) {
			instanciateportlettypeModelerProvider = new InstanciatePortletTypeModelerProvider(this);
		}

		return instanciateportlettypeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.PortletAttributeInstance}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPortletAttributeInstanceAdapter() {
		if (portletattributeinstanceModelerProvider == null) {
			portletattributeinstanceModelerProvider = new PortletAttributeInstanceModelerProvider(this);
		}

		return portletattributeinstanceModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.portal.isChildPage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createisChildPageAdapter() {
		if (ischildpageModelerProvider == null) {
			ischildpageModelerProvider = new isChildPageModelerProvider(this);
		}

		return ischildpageModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (portalmodelelementModelerProvider != null) {
			portalmodelelementModelerProvider.dispose();
		}
		if (portalModelerProvider != null) {
			portalModelerProvider.dispose();
		}
		if (pageModelerProvider != null) {
			pageModelerProvider.dispose();
		}
		if (portallayoutModelerProvider != null) {
			portallayoutModelerProvider.dispose();
		}
		if (columnModelerProvider != null) {
			columnModelerProvider.dispose();
		}
		if (portletModelerProvider != null) {
			portletModelerProvider.dispose();
		}
		if (portlettypeModelerProvider != null) {
			portlettypeModelerProvider.dispose();
		}
		if (portletinternalModelerProvider != null) {
			portletinternalModelerProvider.dispose();
		}
		if (abstractportletattributesModelerProvider != null) {
			abstractportletattributesModelerProvider.dispose();
		}
		if (groupModelerProvider != null) {
			groupModelerProvider.dispose();
		}
		if (portletattributeModelerProvider != null) {
			portletattributeModelerProvider.dispose();
		}
		if (haveportletModelerProvider != null) {
			haveportletModelerProvider.dispose();
		}
		if (positiongroupModelerProvider != null) {
			positiongroupModelerProvider.dispose();
		}
		if (instanciateportlettypeModelerProvider != null) {
			instanciateportlettypeModelerProvider.dispose();
		}
		if (portletattributeinstanceModelerProvider != null) {
			portletattributeinstanceModelerProvider.dispose();
		}
		if (ischildpageModelerProvider != null) {
			ischildpageModelerProvider.dispose();
		}
	}

}
