module RWM2BlueXML; -- Module Template
create OUT : BLUEXML from IN : RWM;

helper context RWM!Attribute def : toBlueXMLType : BLUEXML!AttributeType =
	if (self.type = #TextualValue) then
		#"String"
	else if (self.type = #NumericalValue) then
	    #int
	else if (self.type = #TemporalValue) then
	    #Date
	else
		#Object
	endif endif endif;

helper def: __portalDefinition : BLUEXML!Package =
	OclUndefined;

helper def: __internalPortletDefinition : BLUEXML!Package =
	OclUndefined;

helper def: __securityDefinition : BLUEXML!Package =
	OclUndefined;

helper context String def : normalize() : String =
	self.regexReplaceAll('<([a-zA-Z0-9]*)>(.*)</\\1>','$2').regexReplaceAll('<([a-zA-Z0-9]*)>','')
	    .regexReplaceAll('&lt;([a-zA-Z0-9]*)>(.*)&lt;/\\1>','$2').regexReplaceAll('&lt;([a-zA-Z0-9]*)>','')
		.regexReplaceAll('\\\\(.)','$1');

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

rule definition {
	from s : RWM!RequirementsDefinition
	to
		t : BLUEXML!Package (
			name <- s.name,
			classSet <- BLUEXML!Classe->allInstances(),
			associationSet <- BLUEXML!Association->allInstances(),
			packageSet <- Sequence{portalDefinition,securityDefinition}
		),
		portalDefinition : BLUEXML!Package (
			name <- 'Portal Definition',
			pageSet <- RWM!Goal->allInstances()->select(goal | RWM!Goal->allInstances()->select(g | g.subgoals->includes(goal))->size() = 0),
			packageSet <- Sequence{internalPortletDefinition}
		),
		internalPortletDefinition : BLUEXML!Package (
			name <- 'Internal Portlet Definition',
			internalPortletSet <- BLUEXML!PortletInternal->allInstances()
		),
		securityDefinition : BLUEXML!Package (
			name <- 'Security Definition',
			profileset <- RWM!Agent->allInstances()
		)
		do {
		    thisModule.__portalDefinition <- portalDefinition;
		    thisModule.__internalPortletDefinition <- internalPortletDefinition;
		    thisModule.__securityDefinition <- securityDefinition;
		}
}

rule entity {
	from s : RWM!Entity
	to
		t : BLUEXML!Classe (
			name <- s.name,
			attributes <- s.attributes,
			associations <- RWM!RelationShip->allInstances()->select(r | r.source = s or r.target = s)
		),
		portlet : BLUEXML!PortletInternal (
		    type <- #Array,
		    class <- t
		)
}

rule attribute {
	from s : RWM!Attribute
	to
		t : BLUEXML!Attribute (
			name <- s.name,
			typ <- s.toBlueXMLType
		)
}

rule relationship {
	from s : RWM!RelationShip
	to
		t : BLUEXML!Association (
			name<-s.name,
			source<-s.source,
			minSRC<-s.sourceMin.toString(),
			maxSRC<-s.sourceMax.toString(),
			destination<-s.target,
			minTARGET<-s.targetMin.toString(),
			maxTARGET<-s.targetMax.toString()
		)
}

rule agent {
    from s : RWM!Agent
    to
      t : BLUEXML!Profile (
          name <- s.name,
          documentation <- s.documentation,
          access <- s.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->asSet()->collect(elt | thisModule.createAccessRule(elt,s))
      )
}

rule createAccessRule(e : RWM!BasicElement, agent : RWM!Agent) {
    to t : BLUEXML!AccessRule (
        	target <- e,
        	Read <- let
        						pset : Sequence(RWM!Privilege) = agent.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->select(p | p.element = e)->flatten()->asSet()
        				    in
        				    	pset->select(p | p.category = #read)->size() > 0,
        	Write <- let
        						pset : Sequence(RWM!Privilege) = agent.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->select(p | p.element = e)->flatten()->asSet()
        				    in
        				    	pset->select(p | p.category = #write)->size() > 0,
        	Delete <- let
        						pset : Sequence(RWM!Privilege) = agent.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->select(p | p.element = e)->flatten()->asSet()
        				    in
        				    	pset->select(p | p.category = #delete)->size() > 0,
        	AddChildren <- let
        						pset : Sequence(RWM!Privilege) = agent.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->select(p | p.element = e)->flatten()->asSet()
        				    in
        				    	pset->select(p | p.category = #"create")->size() > 0,
        	Execute <- false
        )
    do {
        t;
    }
}

rule goal {
    from s : RWM!Goal
    to
      t : BLUEXML!Page (
          title <- s.name,
          description <- s.documentation.normalize(),
          isChildPageOf <-
          		if (s.eContainer() <> OclUndefined and s.eContainer().oclIsTypeOf(RWM!Goal)) then
          			thisModule.createInheritance(s.eContainer())
          		else
          		    OclUndefined
          		endif,
          portlets <- 
          		if (s.privilegeGroup <> OclUndefined) then
          			s.privilegeGroup->flatten()->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->select(elt | elt.oclIsTypeOf(RWM!Entity))->asSet()->collect(entity | thisModule.createPortlet(entity))
           		else
          		    Sequence{}
          		endif
      )
    do {
		thisModule.__internalPortletDefinition.pageSet <- thisModule.__internalPortletDefinition.pageSet->including(t);        
    }
}

rule createInheritance(g : RWM!Goal) {
    to  t : BLUEXML!isChildPage(
        	isChildPageOf <- g,
        	inherit <- true
        )
    do {
        t;
    }
}

rule createPortlet(e : RWM!Entity) {
    to  t : BLUEXML!HavePortlet(
        	associationPortlet <- t2
        ),
    	t2 : BLUEXML!Portlet (
        	name <- e.name,
        	isPortletInternal <- thisModule.resolveTemp(e,'portlet')
        )
    do {
		thisModule.__internalPortletDefinition.portletSet <- thisModule.__internalPortletDefinition.portletSet->including(t2);        
        t;
    }
}