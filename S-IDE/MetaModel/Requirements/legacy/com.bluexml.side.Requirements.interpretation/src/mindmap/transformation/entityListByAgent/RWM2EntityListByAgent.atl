-- @atlcompiler atl2006
-- List of agent
module MindMap; -- Module Template
create OUT : MindMap from IN : RWM;

helper context String def : normalize() : String =
	self.regexReplaceAll('<([a-zA-Z0-9]*)>(.*)</\\1>','$2').regexReplaceAll('<([a-zA-Z0-9]*)>','')
	    .regexReplaceAll('&lt;([a-zA-Z0-9]*)>(.*)&lt;/\\1>','$2').regexReplaceAll('&lt;([a-zA-Z0-9]*)>','')
		.regexReplaceAll('\\\\(.)','$1');

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

rule definition {
  from s: RWM!RequirementsDefinition
  to t : MindMap!Maps (
	  maps <- RWM!Agent->allInstances()
  	)
}

rule agent {
	from s : RWM!Agent
	to t : MindMap!"Map" (
	  node <- t_node
  	),
	t_node : MindMap!Node (
		text <- s.name+' - Structure',
		sub <- s.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->collect(pGroup | pGroup.privileges->collect(p | p.element)->select(e | e.oclIsTypeOf(RWM!Entity)))->flatten()->asSet()->collect(entity | thisModule.createNodeFromEntity(entity,s)),
		folded <- false
	)
}

rule createNodeFromEntity(s : RWM!Entity, a : RWM!Agent) {
	to t : MindMap!Node (
		text <- s.name,
		sub <- Sequence{description}->union(a.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->flatten()->collect(pGroup | pGroup.privileges->collect(p | p.element)->select(e | s.attributes->includes(e))->flatten()->asSet()->collect(attribute | thisModule.createNodeFromAttribute(attribute)))),
		folded <- false,
		id <- s.__xmiID__
	),
	description : MindMap!Node (
		text <- s.documentation.normalize(),
		font <- Sequence{font_italic}
	),
	font_italic : MindMap!Font (
		bold <- false,
		italic <- true,
		size <- 10,
		name <- 'SansSerif'
	)
	do {
		t;
	}
}

rule createNodeFromAttribute(s : RWM!Attribute) {
	to t : MindMap!Node (
		text <- s.name,
		sub <- Sequence{description},
		folded <- true
	),
	description : MindMap!Node (
		text <- s.documentation.normalize(),
		font <- Sequence{font_italic}
	),
	font_italic : MindMap!Font (
		bold <- false,
		italic <- true,
		size <- 10,
		name <- 'SansSerif'
	)
	do {
		t;
	}
}