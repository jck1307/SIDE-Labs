-- @atlcompiler atl2006
module RWM2DocBook; -- Module Template
create OUT : Documentation from IN : RWM;

helper context String def : normalize() : String =
	self.regexReplaceAll('<([a-zA-Z0-9]*)>(.*)</\\1>','$2').regexReplaceAll('<([a-zA-Z0-9]*)>','')
	    .regexReplaceAll('&lt;([a-zA-Z0-9]*)>(.*)&lt;/\\1>','$2').regexReplaceAll('&lt;([a-zA-Z0-9]*)>','')
		.regexReplaceAll('\\\\(.)','$1');

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

rule createLinkItem(element : RWM!BasicElement) {
	to t : Documentation!ItemizedListValueItem(
		values <- Sequence{t_value,t_xref,t_value2,t_description}
	),
	t_value : Documentation!TextualValue (
		value <- element.name +' ( voir'
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	),
	t_value2 : Documentation!TextualValue (
		value <- ')'
	),
	t_description : Documentation!EmphasisValue (
		value <- '(' + element.documentation.normalize() + ')'
	)
	do {
		t;
	}
}

rule createLinkList(elements : Sequence(RWM!BasicElement)) {
	to t : Documentation!ItemizedListValue(
		items <- elements->collect(e | thisModule.createLink(e))
	)
	do {
		t;
	}
}

rule createLink(element : RWM!BasicElement) {
	to t : Documentation!Paragraph(
		values <- Sequence{t_value,t_xref,t_value2,t_description}
	),
	t_value : Documentation!TextualValue (
		value <- element.name +' ( voir'
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	),
	t_value2 : Documentation!TextualValue (
		value <- ')'
	),
	t_description : Documentation!EmphasisValue (
		value <- '(' + element.documentation.normalize() + ')'
	)
	do {
		t;
	}
}

rule createLinkWithoutParagraph(element : RWM!BasicElement) {
	to t_value : Documentation!TextualValue (
		value <- element.name +' ( voir'
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	),
	t_value2 : Documentation!TextualValue (
		value <- ')'
	),
	t_description : Documentation!EmphasisValue (
		value <- '(' + element.documentation.normalize() + ')'
	)
	do {
		Sequence{t_value,t_xref,t_value2,t_description};
	}
}

rule ReqDefs {
	from s:RWM!RequirementsDefinition
	to t:Documentation!Book (
		title <- 'Definition des besoins',
		content <- Sequence{t_preface,t_chapter_agents,t_chapter_goals,t_chapter_entities}
	),
	t_preface:Documentation!Section (
	    title <- 'Préface',
		para <- Sequence{t_preface_part}
	),
	t_preface_part:Documentation!Paragraph (
		values <- Sequence{t_preface_part_value}
	),
	t_preface_part_value:Documentation!TextualValue (
		value <- 'Ce document a pour objectif de résumer l\'ensembles des besoins du futur outil métier.'
	),
	t_chapter_agents:Documentation!Section (
		title <- 'Liste des agents',
		section <- RWM!Agent->allInstances()
	),
	t_chapter_goals:Documentation!Section (
		title <- 'Liste des objectifs',
		section <- RWM!Goal->allInstances()
	),
	t_chapter_entities:Documentation!Section (
		title <- 'Liste des entités',
		section <- RWM!Entity->allInstances()
	)
}

rule Member {
	from s:RWM!Agent 
	to t:Documentation!Section (
		title <- s.name,
		section <- Sequence{t_section_description, t_section_responsibilities,t_section_privileges}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description, t_para_description_isHuman}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <- s.documentation.normalize()
	),
	t_para_description_isHuman:Documentation!Paragraph (
		values <- Sequence{t_para_description_isHuman_value1,t_para_description_isHuman_value2}
	),
	t_para_description_isHuman_value1:Documentation!EmphasisValue (
		value <- 'Est un agent humain : ',
		role <- 'bold'
	),
	t_para_description_isHuman_value2:Documentation!EmphasisValue (
		value <- if (s.isHuman) then
				   'Oui'
				 else
				   'Non'
				 endif
	),
	t_section_responsibilities:Documentation!Section (
		title <- 'Responsabilité(s)',
		para <- Sequence{t_para_responsibilities}
	),
	t_para_responsibilities:Documentation!Paragraph (
		values <- Sequence{t_para_responsibilities_list_value,t_para_responsibilities_list}
	),
	t_para_responsibilities_list_value:Documentation!TextualValue (
		value <- 'A la responsabilité de : '
	),
	t_para_responsibilities_list:Documentation!ItemizedListValue (
		items <- s.isResponsible->collect(g | thisModule.createLinkItem(g))
	),
	t_section_privileges:Documentation!Section (
		title <- 'Privilège(s)',
		para <- Sequence{t_para_privileges}
	),
	t_para_privileges:Documentation!Paragraph (
		values <- Sequence{t_para_privileges_value}
	),
	t_para_privileges_value:Documentation!InformalTableValue (
		tgroup <- t_group
	),
	t_group:Documentation!InformalTableValueGroup (
		cols <- 5,
		thead <- t_thead,
		tbody <- t_tbody
	),
	t_thead:Documentation!InformalTableValueHead (
		rows <- Sequence {t_row}
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!InformalTableValueEntry(
		value <- 'Elément'
	), 
	t_entry_create:Documentation!InformalTableValueEntry(
		value <- 'Créer'
	), 
	t_entry_read:Documentation!InformalTableValueEntry(
		value <- 'Lire'
	), 
	t_entry_update:Documentation!InformalTableValueEntry(
		value <- 'Mettre a jour'
	), 
	t_entry_delete:Documentation!InformalTableValueEntry(
		value <- 'Supprimer'
	),
	t_tbody:Documentation!InformalTableValueBody (
		rows <- let allPrivileges : Sequence(RWM!BasicElement) = 
			              s.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->excluding(OclUndefined)->flatten()->collect(pGroup | pGroup.privileges)->flatten()
						in 
		                let allPrivilegesElement : Sequence(RWM!BasicElement) = 
			              allPrivileges->collect(p | p.element)->flatten()
						in
						  let 	entities : Sequence(RWM!Entity) = 
		 					allPrivilegesElement->select(e | e.oclIsTypeOf(RWM!Entity))->
				            union( allPrivilegesElement->select(e | e.oclIsTypeOf(RWM!Attribute))->collect(e | e.refImmediateComposite()))->
				            asSet()->asSequence()
				          in
				             entities->iterate(entity; all : Sequence(RWM!BasicElement) = Sequence{} | all->append(entity)->union(entity.attributes)->union(RWM!RelationShip->allInstances()->select(r | r.source = entity or r.target = entity)))
				             ->collect(e | thisModule.Privilege(e,allPrivileges,OclUndefined))
	)
	do {
	}
}

rule Goal {
	from s:RWM!Goal 
	to t:Documentation!Section (
		title <- s.name,
		section <- Sequence{t_section_description,t_section_privileges}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description,t_para_description_level,t_para_description_parent,t_para_description_child}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <- s.documentation.normalize()
	),
	t_para_description_level:Documentation!Paragraph (
		values <- Sequence{t_para_description_level_value1,t_para_description_level_value2}
	),
	t_para_description_level_value1:Documentation!EmphasisValue (
		value <- 'Niveau d\'importance : ',
		role <- 'bold'
	),
	t_para_description_level_value2:Documentation!EmphasisValue (
		value <- s.priority.toString()
	),
	t_para_description_parent:Documentation!Paragraph (
		values <- if (RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->size() > 0) then
		            thisModule.createLinkWithoutParagraph(RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->first())->insertAt(1,t_para_description_parent_value)
				  else
				  	Sequence{t_para_description_parent_value}
		          endif
	),
	t_para_description_parent_value:Documentation!EmphasisValue (
		value <- 'Objectif parent : ',
		role <- 'bold'
	),
	t_para_description_child:Documentation!Paragraph (
		values <- if (s.subgoals->size() > 0) then 
		            Sequence{t_para_description_child_list_value,thisModule.createLinkList(s.subgoals)}
		          else
		          	Sequence{t_para_description_child_list_value}
		          endif
	),
	t_para_description_child_list_value:Documentation!EmphasisValue (
		value <- 'Liste des sous-objectifs : ',
		role <- 'bold'
	),
	t_section_privileges:Documentation!Section (
		title <- 'Privilèges',
		para <- Sequence{t_para_privileges}
	),
	t_para_privileges:Documentation!Paragraph (
		values <- Sequence{s.privilegeGroup}
	)
}

rule GoalWithResponsible extends Goal{
	from s:RWM!Goal (s.responsible.size() > 0)
	to t:Documentation!Section (
		section <- Sequence{t_section_description, t_section_responsibilities,t_section_privileges}
	),
	t_section_responsibilities:Documentation!Section (
		title <- 'Responsabilité(s)',
		para <- Sequence{t_para_responsibilities}
	),
	t_para_responsibilities:Documentation!Paragraph (
		values <- Sequence{t_para_responsibilities_list_value, t_para_responsibilities_list}
	),
	t_para_responsibilities_list_value:Documentation!TextualValue (
		value <- 'Sous la responsabilité de : '
	),
	t_para_responsibilities_list:Documentation!ItemizedListValue (
		items <- s.responsible->collect(a | thisModule.createLinkItem(a))
	)
}

rule PrivilegeGroup {
	from s:RWM!PrivilegeGroup(s.privileges.size() > 0)
	to t:Documentation!InformalTableValue (
		tgroup <- t_group
	),
	t_group:Documentation!InformalTableValueGroup (
		cols <- 5,
		thead <- t_thead,
		tbody <- t_tbody
	),
	t_thead:Documentation!InformalTableValueHead (
		rows <- Sequence {t_row}
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!InformalTableValueEntry(
		value <- 'Elément'
	), 
	t_entry_create:Documentation!InformalTableValueEntry(
		value <- 'Créer'
	), 
	t_entry_read:Documentation!InformalTableValueEntry(
		value <- 'Lire'
	), 
	t_entry_update:Documentation!InformalTableValueEntry(
		value <- 'Mettre a jour'
	), 
	t_entry_delete:Documentation!InformalTableValueEntry(
		value <- 'Supprimer'
	),
	t_tbody:Documentation!InformalTableValueBody (
		rows <- let entities : Sequence(RWM!Entity) = 
		 		s.privileges->collect(p | p.element)->select(e | e.oclIsTypeOf(RWM!Entity))->
				union( s.privileges->collect(p | p.element)->select(e | e.oclIsTypeOf(RWM!Attribute))->collect(e | e.refImmediateComposite()) )->
				asSet()->asSequence()
				in
				  entities->iterate(entity; all : Sequence(RWM!BasicElement) = Sequence{} | all->append(entity)->union(entity.attributes)->union(RWM!RelationShip->allInstances()->select(r | r.source = entity or r.target = entity)))
				  ->collect(e | thisModule.Privilege(e,s.privileges,s.entryPoint))
	)
}

rule Privilege(element : RWM!BasicElement, group : Sequence(RWM!Privilege), entryPoint : RWM!BasicElement)  {
	to t:Documentation!InformalTableValueRow (
	  entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!InformalTableValueEntry(
		value <- if (element.oclIsTypeOf(RWM!Entity)) then
		           if (element = entryPoint) then
				     '&gt; '+element.name
				   else
		             element.name
				   endif
				 else
				   if (element.oclIsTypeOf(RWM!Attribute)) then
				     element.refImmediateComposite().name+' - [A] '+element.name
				   else
				     '[R] '+element.name
				   endif
				 endif
	), 
	t_entry_create:Documentation!InformalTableValueEntry(
		value <- if (group->select(p | p.element = element and p.category = #"create")->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_read:Documentation!InformalTableValueEntry(
		value <- if (group->select(p | p.element = element and p.category = #read)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_update:Documentation!InformalTableValueEntry(
		value <- if (group->select(p | p.element = element and p.category = #update)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_delete:Documentation!InformalTableValueEntry(
		value <- if (group->select(p | p.element = element and p.category = #delete)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	)
	do {
		t;
	}
}

rule Entity {
	from s:RWM!Entity 
	to t:Documentation!Section (
		title <- s.name,
		section <- Sequence{t_section_description,t_section_relationship}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <- s.documentation.normalize()
	),
	t_section_relationship:Documentation!Section (
		title <- 'Relation(s)',
		para <- Sequence{t_para_relationship}
	),
	t_para_relationship:Documentation!Paragraph (
		values <-if (RWM!RelationShip->allInstances()->select(r | r.source = s or r.target = s)->size() > 0) then
		                   Sequence{t_para_relationship_list_value,thisModule.RelationShip(s)}
		                 else
		                   Sequence{t_para_relationship_list_value}
		                 endif
	),
	t_para_relationship_list_value:Documentation!TextualValue (
		value <- 'Liste des relations : '
	)
}

rule RelationShip(s : RWM!Entity) {
	to t_para_relationship_list:Documentation!ItemizedListValue (
		items <- RWM!RelationShip->allInstances()->select(r | r.source = s or r.target = s)->collect(r | Sequence{r.source, r.target})->flatten()->asSet()->select(elt | elt <> s)->collect(elt | thisModule.createLinkItem(elt))
	)
	do {
		t_para_relationship_list;
	}
}

rule EntityWithAttribute extends Entity {
	from s:RWM!Entity (s.attributes.size() > 0)
	to t:Documentation!Section (
		section <- Sequence{t_section_description,t_section_attributes,t_section_relationship}
	),
	t_section_attributes:Documentation!Section (
		title <- 'Attribut(s)',
		para <- Sequence{t_para_attributs}
	),
	t_para_attributs:Documentation!Paragraph (
		values <- Sequence{t_para_attributs_table}
	),
	t_para_attributs_table:Documentation!InformalTableValue (
		tgroup <- t_group
	),
	t_group:Documentation!InformalTableValueGroup (
		cols <- 3,
		thead <- t_thead,
		tbody <- t_tbody
	),
	t_thead:Documentation!InformalTableValueHead (
		rows <- Sequence {t_row}
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_name, t_entry_type,t_entry_description}
	),
	t_entry_name:Documentation!InformalTableValueEntry(
		value <- 'Nom'
	), 
	t_entry_type:Documentation!InformalTableValueEntry(
		value <- 'Type'
	), 
	t_entry_description:Documentation!InformalTableValueEntry(
		value <- 'Description'
	), 
	t_tbody:Documentation!InformalTableValueBody (
		rows <- s.attributes
	)
}

rule Attribute {
	from s:RWM!Attribute
	to t:Documentation!InformalTableValueRow (
	  entry <- Sequence{t_entry_name, t_entry_type,t_entry_description}
	),
	t_entry_name:Documentation!InformalTableValueEntry(
		value <- s.name
	), 
	t_entry_type:Documentation!InformalTableValueEntry(
		value <- s."type".toString()
	), 
	t_entry_description:Documentation!InformalTableValueEntry(
		value <- s.documentation.normalize()
	)
}