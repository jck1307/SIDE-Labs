-- @atlcompiler atl2006
module RWM2WebProject; -- Module Template
create OUT : WebProject from IN : RWM;

helper def : webProject : WebProject!WebProject = OclUndefined;
helper def : projectSchema : WebProject!Schema = OclUndefined;

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());
	
helper context String def : normalize() : String =
    self.regexReplaceAll('[^a-zA-Z]','');

rule ReqDefs {
    from s : RWM!RequirementsDefinition
    to t : WebProject!Project (
        name <- 'My Web Project',
        pages <- WebProject!Page->allInstances(),
        schema <- schema
    ),
    schema : WebProject!Schema(
        tables <- WebProject!Table->allInstances()
    ),
    loginP : WebProject!LoginPage (
        title <- 'List of users',
        name <- 'index.html',
        links <- RWM!Agent->allInstances()->collect(a | thisModule.resolveTemp(a,'link_loginPage'))
    )
    do {
        thisModule.webProject <- t;
        thisModule.projectSchema <- schema;
    }
}

rule agent {
    from s : RWM!Agent
    to
    link_loginPage : WebProject!Link(
        label <- s.name,
        page <- goalPage
    ),
    framePage : WebProject!FramePage(
        name <- 'frame_'+s.__xmiID__+'.html',
        title <- thisModule.webProject.name,
        col1 <- goalPage
    ),
    goalPage : WebProject!GoalPage (
        name <- s.__xmiID__+'.html',
        title <- 'Goals of '+s.name,
        items <-
        	let allSubGoals : Sequence(RWM!Goal) =
        	    s.isResponsible->collect(g | g.getAllSubGoals())->flatten()->select(g | not(s.isResponsible.includes(g)))
        	in
        		s.isResponsible->select(g | not(allSubGoals->includes(g)))->collect(g | thisModule.createGoalItem(g))
    )
}

rule createGoalItem(s : RWM!Goal) {
	to t : WebProject!GoalItem (
		label <- s.name,
		page <- thisModule.resolveTemp(s,'dataPage'),
		sub <- s.subgoals->collect(g | thisModule.createGoalItem(g))
	)
	do {
		t;
	}
}

helper def : sortEntities(seq : Sequence(RWM!Entity), pset : Sequence(RWM!Privilege), first : RWM!Entity) : Sequence(RWM!Entity) =
	if (seq->size() <= 1) then
		seq
	else
    	let newpset : Sequence(RWM!Privilege) =
            pset->select(p | p.element.oclIsTypeOf(RWM!RelationShip))->select(p | p.element.source = first or p.element.target = first)
        in
        let rset : Sequence(RWM!RelationShip) =
            newpset->collect(p | p.element)
        in
        let entityset : Set(RWM!Entity) =
            rset->collect(r | r.source)->union(rset->collect(r | r.target))->flatten()->excluding(first)->asSet()
        in
        let next : RWM!Entity =
        	if (entityset.size() >= 1) then
    			entityset->asSequence()->first()
    		else
    		    seq->first()
    		endif
        in
        	thisModule.sortEntities(seq->excluding(first),pset->excluding(newpset),next)->prepend(first)
	endif;
    	
rule goalWithPrivileges {
    from s : RWM!Goal (s.privilegeGroup.size() > 0)
    to dataPage : WebProject!DataPage (
        title <- s.name,
        name <- s.__xmiID__+'.php',
        components <- 
        	if (s.privilegeGroup <> OclUndefined) then
        		let allPrivileges : Sequence(RWM!Privilege) =
        		    --s.getAllSubGoals()->collect(g | g.privilegeGroup)->select(pg | pg <> OclUndefined)->collect(pg | pg.privileges)->flatten()
        		    s.privilegeGroup->collect(pg | pg.privileges)->flatten()
        		in
        		let entities : Set(RWM!Entity) =
        			allPrivileges->select(p | p.element.oclIsTypeOf(RWM!Entity))->collect(p | p.element)->asSet()->asSequence()
        		in
        			thisModule.sortEntities(entities,allPrivileges,s.privilegeGroup->first().entryPoint)->collect(e | thisModule.createComponent(e,allPrivileges))
            else
                Sequence{}
        	endif
    ) 
    do {
        dataPage.mainComponent <- dataPage.components->select(cp | cp.name = s.privilegeGroup->first().entryPoint.name)->first();
    }
}


rule goalWithoutPrivileges {
    from s : RWM!Goal (s.privilegeGroup.size() = 0)
    to dataPage : WebProject!GoalPage (
        title <- s.name,
        name <- s.__xmiID__+'.html',
        items <- thisModule.createGoalItem(s)
    )
}

rule createComponent(e : RWM!Entity, pset : Sequence(RWM!Privilege)) {
	to c : WebProject!Component (
          name <- e.name,
          canCreate <- pset->select(p | p.element = e and p.category = #"create")->size() > 0,
          canRead <- pset->select(p | p.element = e and p.category = #read)->size() > 0,
          canUpdate <- pset->select(p | p.element = e and p.category = #update)->size() > 0,
          canDelete <- pset->select(p | p.element = e and p.category = #delete)->size() > 0,
          table <- thisModule.resolveTemp(e,'table'),
          properties <- e.attributes->select(a | pset->select(p | p.element = a)->size() > 0)->collect(a | thisModule.createComponentAttribute(a,pset))
          	->union(RWM!RelationShip->allInstances()->select(r | r.source = e or r.target = e)->select(r | pset->select(p | p.element = r)->size() > 0)
          	->collect(r | thisModule.createComponentRelationShip(r,pset)))
    )
    do {
        c;
    }
}

rule createComponentAttribute(a : RWM!Attribute, pset : Sequence(RWM!Privilege)) {
	to c : WebProject!ComponentAttribute (
          name <- a.name,
          field <- thisModule.resolveTemp(a,'field'),
          canRead <- pset->select(p | p.element = a and p.category = #read)->size() > 0,
          canUpdate <- pset->select(p | p.element = a and p.category = #update)->size() > 0
    )
    do {
        c;
    }
}

rule createComponentRelationShip(r : RWM!RelationShip, pset : Sequence(RWM!Privilege)) {
	to c : WebProject!ComponentRelationShip (
	    name <- r.name,
	    idLeft <-thisModule.resolveTemp(r.source,'id'),
        mandatoryLeft <- r.sourceMax = -1 or r.sourceMax > 1,
	    idRight <- thisModule.resolveTemp(r.target,'id'),
        mandatoryRight <- r.targetMax = -1 or r.targetMax > 1,
        canRead <- pset->select(p | p.element = r and p.category = #read)->size() > 0,
        canUpdate <- pset->select(p | p.element = r and p.category = #update)->size() > 0
    )
    do {
        c;
    }
}

----------------------------------------
-- RELATIONAL SCHEMA
----------------------------------------

rule entity {
    from e : RWM!Entity
    to table : WebProject!Table (
        name <- e.name.normalize(),
        fields <- e.attributes->prepend(id),
        primaryKey <- Sequence{id}
    ),
    id : WebProject!Field (
        name <- 'id_'+e.__xmiID__,
        dataType <- #integer,
        autoincrement <- true
    )
}

rule attribute {
    from a : RWM!Attribute
    to field : WebProject!Field (
        name <- a.name.normalize(),
        dataType <-
        	if (a.type = #TextualValue) then
        	    #string
        	else if (a.type = #NumericalValue) then
        	    #real
        	else if (a.type = #TemporalValue) then
        	    #dateTime
        	else
        	    #string
        	endif endif endif
    )
}

rule relationship {
    from r : RWM!RelationShip (r.source <> OclUndefined and r.target <> OclUndefined)
    to table : WebProject!Table (
        name <- r.source.name.normalize()+'2'+r.target.name.normalize(),
        fields <- Sequence{idLeft, idRight},
        primaryKey <- Sequence{idLeft,idRight}
    ),
    idLeft : WebProject!Field (
        name <- 'id_'+r.source.__xmiID__,
        dataType <- #integer
    ),
    idRight : WebProject!Field (
        name <- 'id_'+r.target.__xmiID__,
        dataType <- #integer
    )
}