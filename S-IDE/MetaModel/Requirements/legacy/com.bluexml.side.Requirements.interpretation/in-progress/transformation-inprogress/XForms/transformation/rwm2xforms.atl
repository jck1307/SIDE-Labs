-- @atlcompiler atl2006
module rwm2xforms; -- Module Template
create OUT : XFORMS from IN : RWM;

rule root {
	from s : RWM!RequirementsDefinition
	to t : XFORMS!XFormsDocumentRoot(
		trigger <- RWM!Entity->allInstances()->collect(e | thisModule.resolveTemp(e,'triggert'))->asSequence(),
		switch <- Sequence{switch_tmp}
    ),
	switch_tmp : XFORMS!SwitchType (
		case <- RWM!Entity->allInstances()->collect(e | thisModule.resolveTemp(e,'caset'))->asSequence()
	)
}

rule entity {
	from s : RWM!Entity
	to triggert : XFORMS!TriggerType (
		label <- l,
		toggle <- Sequence{t}
	),
	l : XFORMS!LabelType(
		text <- s.name
	),
	t : XFORMS!ToggleType(
		case <- 'cas'+s.name,
		event <- 'DOMActivate'
	),
	caset : XFORMS!CaseType(
		id <- 'cas'+s.name,
		group <- groupt
	),
	groupt : XFORMS!GroupType (
		label <- labelt,
		input <- Sequence{s.attributes,RWM!End->allInstances()->select(e | e.object = s)->collect(e|e.eContainer())->collect(r | thisModule.relationship(r,s))}
	),
	labelt : XFORMS!LabelType(
		text <- 'Forms : ' + s.name
	)
}

rule attribute {
	from s : RWM!Attribute(s.type <> #Other)
	to inputt : XFORMS!InputType (
		label <- input_label,
		hint <- input_hint
	),
	input_label : XFORMS!LabelType (
		text <- s.name + ': '
	),
	input_hint :  XFORMS!HintType (
		text <- 'Documentation : '+s.documentation.regexReplaceAll('<br>','<br/>')
	)
}

rule temporal_attribute extends attribute{
	from s : RWM!Attribute (s.type = #TemporalValue)
	to inputt : XFORMS!InputType (
		ref <-'a_date'
	)
}

rule other_attribute {
	from s : RWM!Attribute (s.type = #Other)
	to inputt : XFORMS!SelectType (
		label <- select_label,
		item <- Sequence{item1, item2, item3}
	),
	select_label : XFORMS!LabelType (
		text <- s.name + ': '
	),
	item1 : XFORMS!ItemType (
		label <- label1
	),
	label1 : XFORMS!LabelType (
		text <- 'Value 1'
	),
	item2 : XFORMS!ItemType (
		label <- label2
	),
	label2 : XFORMS!LabelType (
		text <- 'Value 2'
	),
	item3 : XFORMS!ItemType (
		label <- label3
	),
	label3 : XFORMS!LabelType (
		text <- 'Value 3'
	)
}

rule relationship(s : RWM!RelationShip, entity : RWM!Entity) {
    using {
    	other_entity : RWM!Entity = s.ends->select(e | e.object <> entity)->first().object;
    }
	to t : XFORMS!ButtonType (
		trigger <- trigger_t
	),
	trigger_t : XFORMS!TriggerType (
		label <- l,
		toggle <- Sequence{toggle}
	),
	l : XFORMS!LabelType(
		text <- 'Liste de(s) '+other_entity.name
	),
	toggle : XFORMS!ToggleType(
		case <- 'cas'+other_entity.name,
		event <- 'DOMActivate'
	)
	do {
		t;
	}
}