-- @atlcompiler atl2006
module RWM2DocBook; -- Module Template
create OUT : Documentation from IN : RWM;

helper context String def : normalize() : String =
	self.regexReplaceAll('&','&amp;').regexReplaceAll('<','&lt;').regexReplaceAll('>','&gt;')
	    .regexReplaceAll('<([a-zA-Z0-9]*)>(.*)</\\1>','$2').regexReplaceAll('&lt;([a-zA-Z0-9]*)>(.*)&lt;/\\1>','$2')
		.regexReplaceAll('\\\\(.)','$1').regexReplaceAll('&#xA;','&#xD;&#xA;');
		

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

helper def : sort(goals : Sequence(RWM!Goal), previous : Set(RWM!Goal), p : RWM!Process) : Sequence(RWM!Goal) =
	if (goals->size() <= 1) then
		goals
	else
		let first : Sequence(RWM!Goal) =
			previous->collect(g | g.step)->flatten()->select(st | st.process = p)->collect(st | st.nextGoals)->flatten()->asSet()->intersection(goals)
		in
			first->union(thisModule.sort(goals->reject(g | previous->includes(g) or first->includes(g)),first,p))
	endif;
	
rule createTextualValue(text : String) {
	to t : Documentation!TextualValue (
		value <- text
	)
	do {
		t;
	}
}

rule createParagraph(text : String) {
	to t : Documentation!Paragraph(
		values <- Sequence{thisModule.createTextualValue(text)}
	)
	do {
		t;
	}
}

rule createSection(_title : String, text : String) {
	to t : Documentation!Section(
		para <- Sequence{thisModule.createParagraph(text)},
		title <- _title
	)
	do {
		t;
	}
}

rule createPrivilegeSection(s : RWM!Goal) {
	to t_section_privileges:Documentation!Section (
		title <- 'Privilèges',
		para <- Sequence{t_para_privileges}
	),
	t_para_privileges:Documentation!Paragraph (
		values <- Sequence{s.privilegeGroup}
	)
	do {
		t_section_privileges;
	}
}

	
rule createLinkItem(element : RWM!BasicElement) {
	to t : Documentation!ItemizedListValueItem(
		values <- Sequence{t_xref}
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	)
	do {
		t;
	}
}

rule createLinkItemWithDocumentation(element : RWM!BasicElement) {
	to t : Documentation!ItemizedListValueItem(
		values <- Sequence{t_value,t_xref,t_value2,t_description}
	),
	t_value : Documentation!TextualValue (
		value <- element.name.normalize() +' ( voir'
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	),
	t_value2 : Documentation!TextualValue (
		value <- ')'
	),
	t_description : Documentation!EmphasisValue (
		value <- 
			if (element.documentation <> OclUndefined) then
				' : ' + element.documentation.normalize()
			else
				''
			endif
	)
	do {
		t;
	}
}

rule createLinkList(elements : Sequence(RWM!BasicElement)) {
	to t : Documentation!ItemizedListValue(
		items <- elements->collect(e | thisModule.createLinkItem(e))
	)
	do {
		t;
	}
}

rule createLink(element : RWM!BasicElement) {
	to t : Documentation!Paragraph(
		values <- Sequence{t_value,t_xref,t_value2,t_description}
	),
	t_value : Documentation!TextualValue (
		value <- element.name +' ( voir'
	),
	t_xref : Documentation!XRefValue (
		linkend <- element
	),
	t_value2 : Documentation!TextualValue (
		value <- ')'
	),
	t_description : Documentation!EmphasisValue (
		value <-
			if (element.documentation <> OclUndefined) then
				'(' + element.documentation.normalize() + ')'
			else
				'()'
			endif
	)
	do {
		t;
	}
}

rule createLinkWithoutParagraph(element : RWM!BasicElement) {
	to t_xref : Documentation!XRefValue (
		linkend <- element
	)
	do {
		Sequence{t_xref};
	}
}

rule createProcessStep(goal : RWM!Goal, p : RWM!Process, start : Boolean) {
	using {
		nextGoals : Sequence(RWM!Goal) = 
			goal.step->select(st | st.process = p)->collect(st | st.nextGoals)->flatten()->asSet();
	}
	to t : Documentation!ItemizedListValueItem(
		values <- Sequence{t_value,t_xref,t_value2,t_value3}
	),
	t_value : Documentation!TextualValue (
		value <-
			if (start) then
				'[DEBUT] '
			else
				''
			endif
	),
	t_xref : Documentation!XRefValue (
		linkend <- goal
	),
	t_value2 : Documentation!TextualValue (
		value <- 
			if (nextGoals->size() > 0) then
				'\n Prochaine(s) étape(s) : '
			else
				''
			endif
	),
	t_value3 : Documentation!ItemizedListValue(
		items <- nextGoals->collect(g | thisModule.createProcessNextStep(g))
	)
	do {
		t;
	}
}

rule createProcessNextStep(goal : RWM!Goal) {
	to t : Documentation!ItemizedListValueItem(
		values <- Sequence{t_value}
	),
	t_value : Documentation!TextualValue (
		value <- goal.name.normalize()
	)
	do {
		t;
	}
}

rule ReqDefs {
	from s:RWM!RequirementsDefinition
	to t:Documentation!Book (
		title <- s.name+'
		
		Cahier des charges',
		content <-
			let preface : Documentation!Section =
				thisModule.createSection('Préface','Le but de ce document est de décrire les besoins métier de l\'application cible. 
					Il s\'appuie sur une méthodologie de description des besoins basée sur les objectifs. 
					Cette méthodologie consiste à:
						1/ identifier chaque catégorie d\'acteur pouvant intervenir sur l\'application,
						2/ définir par catégorie d\'acteur les objectifs métier qu\'il souhaite adresser via l\'application et dont on dit qu\'il est responsable.
						3/ structurer ces objectifs soit en termes de processus pour tenir compte de la dépendance des objectifs, soit en termes de hiérarchies pour tenir compte de la spécialisation progressive d\'objectifs (hiérarchie de sous-objectifs).
						4/ caractériser ces objectifs à travers les objets que l\'acteur va être amené à manipuler pour adresser ses objectifs via l\'application. Par exemple, un objet peut être un document qui sera manipulé dans le cadre d\'un objectif de "publication de documents". Ces objets sont décrits à travers leurs attributs et les relations qu\'ils ont entre eux.

				Cette méthodologie est mise en oeuvre dans l\'environnement MDA SIDE de BlueXML à travers des modèles de besoins créé sous le modeleur graphique de besoins: ces modèles sont ensuite générés pour produire un certain nombre de livrables dont ce cahier des charges orienté objectifs. Un autre livrable est une application web d\'annotations permettant à des fonctionnels d\'annoter les modèles pour les améliorer et mieux circonscrire les besoins.')
			in let structure : Documentation!Section =
				thisModule.createSection('Structure de la documentation','Ce document est structuré en 4 chapitres principaux:
					- "Agents": ce chapitre liste les catégories d\'acteurs visant à utiliser l\'application cible et pour lesquels il est nécessaire de décrire les besoins adressés,
					- "Objectifs": ce chapitre décrit les caractéristiques des objectifs adressés,
					- "Processus": ce chapitre décrit des processus métier particuliers de l\'application faisant apparaître l\'enchainement d\'objectifs dépendants,
					- "Entités": ce chapitre décrit les objets manipulés par les objectifs, les privilèges en terme de manipulation (création, visualisation, mise à jour et suppression) des ces objets par les acteurs et les relations entre ces objets.')
			in let project : Documentation!Section =
				thisModule.createSection('Définition du projet',s.documentation.normalize())
			in
				Sequence{preface,structure,project,t_chapter_agents,t_chapter_goals,t_chapter_process,t_chapter_entities}
	),
	t_chapter_agents:Documentation!Section (
		title <- 'Agents',
		section <- RWM!Agent->allInstances()
	),
	t_chapter_goals:Documentation!Section (
		title <- 'Objectifs',
		section <- RWM!Goal->allInstances()
	),
	t_chapter_entities:Documentation!Section (
		title <- 'Entités',
		section <- RWM!Entity->allInstances()
	),
	t_chapter_process:Documentation!Section (
		title <- 'Processus',
		section <- RWM!Process->allInstances()
	)
	
}

rule Member {
	from s:RWM!Agent 
	to t:Documentation!Section (
		title <- s.name,
		section <- Sequence{t_section_description, t_section_responsibilities,t_section_privileges}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description, t_para_description_isHuman}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <- 
			if (s.documentation <> OclUndefined) then
				s.documentation.normalize()
			else
				''
			endif
	),
	t_para_description_isHuman:Documentation!Paragraph (
		values <- Sequence{t_para_description_isHuman_value1,t_para_description_isHuman_value2}
	),
	t_para_description_isHuman_value1:Documentation!EmphasisValue (
		value <- 'Est un agent humain : ',
		role <- 'bold'
	),
	t_para_description_isHuman_value2:Documentation!EmphasisValue (
		value <- if (s.isHuman) then
				   'Oui'
				 else
				   'Non'
				 endif
	),
	t_section_responsibilities:Documentation!Section (
		title <- 'Responsabilité(s)',
		para <- Sequence{t_para_responsibilities}
	),
	t_para_responsibilities:Documentation!Paragraph (
		values <- Sequence{t_para_responsibilities_list_value,t_para_responsibilities_list}
	),
	t_para_responsibilities_list_value:Documentation!TextualValue (
		value <- 'A la responsabilité de : '
	),
	t_para_responsibilities_list:Documentation!ItemizedListValue (
		items <- s.isResponsible->collect(g | thisModule.createLinkItem(g))
	),
	t_section_privileges:Documentation!Section (
		title <- 'Privilège(s)',
		para <- Sequence{t_para_privileges}
	),
	t_para_privileges:Documentation!Paragraph (
		values <- Sequence{t_para_privileges_value}
	),
	t_para_privileges_value:Documentation!InformalTableValue (
		cols <- 5,
		headRows <- Sequence {t_row},
		bodyRows <- let allPrivileges : Sequence(RWM!BasicElement) = 
		             s.isResponsible->collect(goal | goal.getAllSubGoals())->flatten()->collect(goal | goal.privilegeGroup)->excluding(OclUndefined)->flatten()->collect(pGroup | pGroup.privileges)->flatten()
				in 
		        	let allPrivilegesElement : Sequence(RWM!BasicElement) = 
		            	allPrivileges->collect(p | p.element)->flatten()
					in
						let 	entities : Sequence(RWM!Entity) = 
		 					allPrivilegesElement->select(e | e.oclIsTypeOf(RWM!Entity))->
				            union( allPrivilegesElement->select(e | e.oclIsTypeOf(RWM!Attribute))->collect(e | e.refImmediateComposite()))->
				            asSet()->asSequence()
				        in
				             entities->iterate(entity; all : Sequence(RWM!BasicElement) = Sequence{} | all->append(entity)->union(entity.attributes)->union(RWM!RelationShip->allInstances()->select(r | r.source = entity or r.target = entity)))
				             ->collect(e | thisModule.Privilege(e,allPrivileges,OclUndefined))
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!TextualValue(
		value <- 'Entité &amp; attribut'
	), 
	t_entry_create:Documentation!TextualValue(
		value <- 'Créer'
	), 
	t_entry_read:Documentation!TextualValue(
		value <- 'Lire'
	), 
	t_entry_update:Documentation!TextualValue(
		value <- 'Mettre a jour'
	), 
	t_entry_delete:Documentation!TextualValue(
		value <- 'Supprimer'
	)
}

rule Goal {
	from s:RWM!Goal 
	to t:Documentation!Section (
		title <- s.name.normalize(),
		section <- 
			if (not(s.synopsis.oclIsUndefined())) then
				if (s.privilegeGroup->collect(pg | pg.privileges)->flatten()->size() > 0) then
					Sequence{t_section_description,thisModule.createSection('Synopsis',s.synopsis.normalize()),t_section_responsibilities,thisModule.createPrivilegeSection(s)}
				else
					Sequence{t_section_description,thisModule.createSection('Synopsis',s.synopsis.normalize()),t_section_responsibilities}
				endif
			else
				if (s.privilegeGroup->collect(pg | pg.privileges)->flatten()->size() > 0) then
					Sequence{t_section_description,t_section_responsibilities,thisModule.createPrivilegeSection(s)}
				else
					Sequence{t_section_description,t_section_responsibilities}
				endif
			endif
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description,t_para_description_level,t_para_description_parent,t_para_description_child}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <-
			if (s.documentation <> OclUndefined) then
				s.documentation.normalize()
			else
				''
			endif
	),
	t_para_description_level:Documentation!Paragraph (
		values <- Sequence{t_para_description_level_value1,t_para_description_level_value2}
	),
	t_para_description_level_value1:Documentation!EmphasisValue (
		value <- 'Niveau d\'importance : ',
		role <- 'bold'
	),
	t_para_description_level_value2:Documentation!EmphasisValue (
		value <-
			if (s.priority = #VeryHigh) then
				'Très important'
			else if (s.priority = #High) then
				'Important'
			else if (s.priority = #Normal) then
				'Normal'
			else if (s.priority = #Low) then
				'Faible'
			else if (s.priority = #VeryLow) then
				'Très faible'
			else
				''
			endif endif endif endif endif
	),
	t_para_description_parent:Documentation!Paragraph (
		values <- if (RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->size() > 0) then
		            thisModule.createLinkWithoutParagraph(RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->first())->insertAt(1,t_para_description_parent_value)
				  else
				  	Sequence{t_para_description_parent_value, thisModule.createTextualValue('N/A')}
		          endif
	),
	t_para_description_parent_value:Documentation!EmphasisValue (
		value <- 'Objectif parent : ',
		role <- 'bold'
	),
	t_para_description_child:Documentation!Paragraph (
		values <- if (s.subgoals->size() > 0) then 
		            Sequence{t_para_description_child_list_value,thisModule.createLinkList(s.subgoals)}
		          else
		          	Sequence{t_para_description_child_list_value, thisModule.createTextualValue('N/A')}
		          endif
	),
	t_para_description_child_list_value:Documentation!EmphasisValue (
		value <- 'Liste des sous-objectifs : ',
		role <- 'bold'
	),
	t_section_responsibilities:Documentation!Section (
		title <- 'Responsabilité(s)',
		para <- Sequence{t_para_responsibilities}
	),
	t_para_responsibilities:Documentation!Paragraph (
		values <- if (s.subgoals->size() > 0) then 
		            Sequence{t_para_responsibilities_list_value,thisModule.createLinkList(s.responsible)}
		          else
		          	Sequence{t_para_responsibilities_list_value, thisModule.createTextualValue('N/A')}
		          endif
	),
	t_para_responsibilities_list_value:Documentation!TextualValue (
		value <- 'Sous la responsabilité de : '
	)
}

rule PrivilegeGroup {
	from s:RWM!PrivilegeGroup(s.privileges.size() > 0)
	to t:Documentation!InformalTableValue (
		cols <- 5,
		headRows <- Sequence {t_row},
		bodyRows <- let entities : Sequence(RWM!Entity) = 
		 		s.privileges->collect(p | p.element)->select(e | e.oclIsTypeOf(RWM!Entity))->
				union( s.privileges->collect(p | p.element)->select(e | e.oclIsTypeOf(RWM!Attribute))->collect(e | e.refImmediateComposite()) )->
				asSet()->asSequence()
				in
				  entities->iterate(entity; all : Sequence(RWM!BasicElement) = Sequence{} | all->append(entity)->union(entity.attributes)->union(RWM!RelationShip->allInstances()->select(r | r.source = entity or r.target = entity)))
				  ->collect(e | thisModule.Privilege(e,s.privileges,s.entryPoint))
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!TextualValue(
		value <- 'Entité &amp; attribut'
	), 
	t_entry_create:Documentation!TextualValue(
		value <- 'Créer'
	), 
	t_entry_read:Documentation!TextualValue(
		value <- 'Lire'
	), 
	t_entry_update:Documentation!TextualValue(
		value <- 'Mettre a jour'
	), 
	t_entry_delete:Documentation!TextualValue(
		value <- 'Supprimer'
	)
}

rule Privilege(element : RWM!BasicElement, group : Sequence(RWM!Privilege), entryPoint : RWM!BasicElement)  {
	to t:Documentation!InformalTableValueRow (
	  entry <- Sequence{t_entry_element, t_entry_create, t_entry_read, t_entry_update, t_entry_delete}
	),
	t_entry_element:Documentation!TextualValue(
		value <- if (element.oclIsTypeOf(RWM!Entity)) then
		           if (element = entryPoint) then
				     '&gt; '+element.name
				   else
		             element.name
				   endif
				 else
				   if (element.oclIsTypeOf(RWM!Attribute)) then
				     element.refImmediateComposite().name+' - [A] '+element.name
				   else
				     '[R] '+element.name
				   endif
				 endif
	), 
	t_entry_create:Documentation!TextualValue(
		value <- if (group->select(p | p.element = element and p.category = #"create")->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_read:Documentation!TextualValue(
		value <- if (group->select(p | p.element = element and p.category = #read)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_update:Documentation!TextualValue(
		value <- if (group->select(p | p.element = element and p.category = #update)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	), 
	t_entry_delete:Documentation!TextualValue(
		value <- if (group->select(p | p.element = element and p.category = #delete)->size() > 0) then
			       'X'
			     else
			       ''
				 endif
	)
	do {
		t;
	}
}

rule Entity {
	from s:RWM!Entity 
	to t:Documentation!Section (
		title <- s.name,
		section <- Sequence{t_section_description,t_section_relationship}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <-
			if (s.documentation <> OclUndefined) then
				s.documentation.normalize()
			else
				''
			endif
	),
	t_section_relationship:Documentation!Section (
		title <- 'Relation(s)',
		para <- Sequence{t_para_relationship}
	),
	t_para_relationship:Documentation!Paragraph (
		values <-if (RWM!RelationShip->allInstances()->select(r | r.source = s or r.target = s)->size() > 0) then
		                   Sequence{t_para_relationship_list_value,thisModule.RelationShip(s)}
		                 else
		                   Sequence{t_para_relationship_list_value}
		                 endif
	),
	t_para_relationship_list_value:Documentation!TextualValue (
		value <- 'Liste des relations : '
	)
}

rule RelationShip(s : RWM!Entity) {
	to t_para_relationship_list:Documentation!ItemizedListValue (
		items <- RWM!RelationShip->allInstances()->select(r | r.source = s or r.target = s)->collect(r | Sequence{r.source, r.target})->flatten()->asSet()->select(elt | elt <> s)->collect(elt | thisModule.createLinkItemWithDocumentation(elt))
	)
	do {
		t_para_relationship_list;
	}
}

rule EntityWithAttribute extends Entity {
	from s:RWM!Entity (s.attributes.size() > 0)
	to t:Documentation!Section (
		section <- Sequence{t_section_description,t_section_attributes,t_section_relationship}
	),
	t_section_attributes:Documentation!Section (
		title <- 'Attribut(s)',
		para <- Sequence{t_para_attributs}
	),
	t_para_attributs:Documentation!Paragraph (
		values <- Sequence{t_para_attributs_table}
	),
	t_para_attributs_table:Documentation!InformalTableValue (
		cols <- 3,
		headRows <- Sequence {t_row},
		bodyRows <- s.attributes
	),
	t_row:Documentation!InformalTableValueRow (
		entry <- Sequence{t_entry_name, t_entry_type,t_entry_description}
	),
	t_entry_name:Documentation!TextualValue(
		value <- 'Nom'
	), 
	t_entry_type:Documentation!TextualValue(
		value <- 'Type'
	), 
	t_entry_description:Documentation!TextualValue(
		value <- 'Description'
	) 
}

rule Attribute {
	from s:RWM!Attribute
	to t:Documentation!InformalTableValueRow (
	  entry <- Sequence{t_entry_name, t_entry_type,t_entry_description}
	),
	t_entry_name:Documentation!TextualValue(
		value <- s.name
	), 
	t_entry_type:Documentation!TextualValue(
		value <- s."type".toString()
	), 
	t_entry_description:Documentation!TextualValue(
		value <-
			if (s.documentation <> OclUndefined) then
				s.documentation.normalize()
			else
				''
			endif
	)
}

rule Process {
    from s : RWM!Process
	using {
		steps : Set(RWM!GoalStep) =
				RWM!GoalStep->allInstances()->select(step | step.process = s);
		goals : Set(RWM!Goal) =
				steps->collect(s | s.refImmediateComposite())->union(steps->collect(s | s.nextGoals)->flatten())->asSet();
		startGoal : Set(RWM!Goal) =
				goals->select(g | steps->collect(s | s.nextGoals)->flatten()->excludes(g));
		endGoal : Set(RWM!Goal) =
				goals->select(g | steps->excludesAll(g.step));
	}
	to t:Documentation!Section (
		title <- s.name.normalize(),
		section <- Sequence{t_section_description,t_section_process}
	),
	t_section_description:Documentation!Section (
		title <- 'Documentation',
		para <- Sequence{t_para_description}
	),
	t_para_description:Documentation!Paragraph (
		values <- Sequence{t_para_description_value}
	),
	t_para_description_value:Documentation!TextualValue (
		value <-
			if (s.documentation <> OclUndefined) then
				s.documentation.normalize()
			else
				''
			endif
	),
	t_section_process:Documentation!Section (
		title <- 'Description du processus',
		para <- Sequence{t_para_description_process}
	),
	t_para_description_process:Documentation!Paragraph (
		values <- Sequence{t_para_description_process_list}
	),
	t_para_description_process_list:Documentation!ItemizedListValue (
		items <- startGoal->collect(g | thisModule.createProcessStep(g,s,true))
			->union(thisModule.sort(goals->select(g | startGoal->excludes(g) and endGoal->excludes(g)),startGoal,s)->collect(g | thisModule.createProcessStep(g,s,false)))
			->union(endGoal->collect(g | thisModule.createProcessStep(g,s,false)))
	)
}