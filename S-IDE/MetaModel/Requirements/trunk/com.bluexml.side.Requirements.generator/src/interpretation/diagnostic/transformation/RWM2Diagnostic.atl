module RWM2Problem; -- Module Template
create OUT : Diagnostic from IN : RWM;

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

------------------------------------------------
-- BasicElement
------------------------------------------------

helper context RWM!BasicElement def : checkElement() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkElementName(), self.checkElementDocumentation()};

helper context RWM!BasicElement def : checkElementName() : Diagnostic!Problem =
	if (self.name = '' or self.name = OclUndefined) then
	   thisModule.createProblem(#error, self.oclType().toString(),self.name,'Name empty.')
	else
		OclUndefined
	endif;

helper context RWM!BasicElement def : checkElementDocumentation() : Diagnostic!Problem =
	if (self.documentation = '' or self.documentation = OclUndefined) then
	   thisModule.createProblem(#warning, self.oclType().toString(),self.name,'Documentation empty.')
	else
		OclUndefined
	endif;
	
------------------------------------------------
-- Agent
------------------------------------------------

helper context RWM!Agent def : checkAgent() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkAgentWithoutResponsibilty(),self.checkAgentWithSameResponsibilty(),self.checkAgentWithRedundantResponsibilty()};

helper context RWM!Agent def : checkAgentWithoutResponsibilty() : Diagnostic!Problem =
	if (self.isResponsible->size() = 0) then
	   thisModule.createProblem(#critical, self.oclType().toString(),self.name,'Agent without responsibility.')
	else
		OclUndefined
	endif;

helper context RWM!Agent def : checkAgentWithSameResponsibilty() : Diagnostic!Problem =
	if (RWM!Agent->allInstances()->excluding(self)->select(a | a.isResponsible->includesAll(self.isResponsible) and self.isResponsible->includesAll(a.isResponsible))->size() > 0) then
	   thisModule.createProblem(#warning, self.oclType().toString(),self.name,RWM!Agent->allInstances()->select(a | a.isResponsible->includesAll(self.isResponsible) and self.isResponsible->includesAll(a.isResponsible)).toString()+' have same responsibility.')
	else
		OclUndefined
	endif;

helper context RWM!Agent def : checkAgentWithRedundantResponsibilty() : Diagnostic!Problem =
    self.isResponsible->iterate(goal; problem : Diagnostic!Problem = OclUndefined | 
           if (self.isResponsible->collect(goal | goal.getAllSubGoals()->excluding(goal))->flatten()->asSet()->includes(goal)) then
	           thisModule.createProblem(#critic, self.oclType().toString(),goal.name,'The responsibility on this goal is useless for the user '+self.name+'.')
           else
               OclUndefined
           endif
     );

------------------------------------------------
-- Goal
------------------------------------------------

helper context RWM!Goal def : checkGoal() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkGoalPrivilege()};
	
helper context RWM!Goal def : checkGoalPrivilege() : Diagnostic!Problem =
	if (self.getAllSubGoals()->collect(g | g.privilegeGroup)->flatten()->excluding(OclUndefined)->collect(g | g.privileges)->size() > 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'No privilege.')
	else
		OclUndefined
	endif;

helper def : checkMainGoal() : Diagnostic!Problem =
	if (RWM!Goal->allInstances()->select(goal | RWM!Goal->allInstances()->select(g | g.subgoals->includes(goal))->size() = 0)->size() > 1) then
	   thisModule.createProblem(#error, 'RWM!Goal','','More than one main goal : '+RWM!Goal->allInstances()->select(goal | RWM!Goal->allInstances()->select(g | g.subgoals->includes(goal))->size() = 0).toString()+'.')
	else
		OclUndefined
	endif;

------------------------------------------------
-- Entity
------------------------------------------------

helper context RWM!Entity def : checkEntity() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkEntityProperties(), self.checkEntityPrivilege(), self.checkEntityPrivilege_2(), self.checkEntityPrivilege_3()};
	
helper context RWM!Entity def : checkEntityProperties() : Diagnostic!Problem =
	if (self.attributes->size() = 0 and RWM!RelationShip->allInstances()->select(r | r.source = self or r.target = self)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'No attribute and relationship.')
	else
		OclUndefined
	endif;

helper context RWM!Entity def : checkEntityPrivilege() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'No privilege on this element.')
	else
		OclUndefined
	endif;

helper context RWM!Entity def : checkEntityPrivilege_2() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #update)->size() > 1 and 
	        RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #read)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'Update available on this element but not read.')
	else
		OclUndefined
	endif;

helper context RWM!Entity def : checkEntityPrivilege_3() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #delete)->size() > 1 and 
	        RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #read)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'Delete available on this element but not read.')
	else
		OclUndefined
	endif;

------------------------------------------------
-- Attribute
------------------------------------------------

helper context RWM!Attribute def : checkAttribute() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkAttributePrivilege(), self.checkAttributePrivilege_2()};
	
helper context RWM!Attribute def : checkAttributePrivilege() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'No privilege on this element.')
	else
		OclUndefined
	endif;

helper context RWM!Attribute def : checkAttributePrivilege_2() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #update)->size() > 1 and 
	        RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #read)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'Update available on this element but not read.')
	else
		OclUndefined
	endif;

------------------------------------------------
-- RelationShip
------------------------------------------------

helper context RWM!RelationShip def : checkRelationShip() : Sequence(Diagnostic!Problem) =
	Sequence{self.checkRelationShipPrivilege(), self.checkRelationShipPrivilege_2(),self.checkRelationShipPrivilege_3()};
	
helper context RWM!RelationShip def : checkRelationShipPrivilege() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'No privilege on this element.')
	else
		OclUndefined
	endif;

helper context RWM!RelationShip def : checkRelationShipPrivilege_2() : Diagnostic!Problem =
	if (RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #update)->size() > 1 and 
	        RWM!Privilege->allInstances()->select(p | p.element = self and p.category = #read)->size() = 0) then
	   thisModule.createProblem(#critic, self.oclType().toString(),self.name,'Update available on this element but not read.')
	else
		OclUndefined
	endif;

helper context RWM!RelationShip def : checkRelationShipPrivilege_3() : Diagnostic!Problem =
	if (self.target = OclUndefined or self.source = OclUndefined) then
	   thisModule.createProblem(#error, self.oclType().toString(),self.name,'No valid.')
	else
		OclUndefined
	endif;

------------------------------------------------

rule Diagnostic {
	from s : RWM!RequirementsDefinition
	to t : Diagnostic!Diagnostic (
		)
    do {
		--BasicElement        
    	for (e in RWM!BasicElement->allInstances()) {
    		e.checkElement();
    	}
		--Agent
    	for (e in RWM!Agent->allInstances()) {
    		e.checkAgent();
    	}
		--Goal
		thisModule.checkMainGoal();
    	for (e in RWM!Goal->allInstances()) {
    		e.checkGoal();
    	}
    	--Entity
    	for (e in RWM!Entity->allInstances()) {
    		e.checkEntity();
    	}
    	--Attribute
    	for (e in RWM!Attribute->allInstances()) {
    		e.checkAttribute();
    	}
    	--RelationShip
    	for (e in RWM!RelationShip->allInstances()) {
    		e.checkRelationShip();
    	}
    	t.problem <- Diagnostic!Problem->allInstances();
    }
}

rule createProblem(_severity : Diagnostic!Severity, _elementType : String, _elementName : String, _description : String) {
	to t : Diagnostic!Problem ( 
		severity <- _severity,
		elementType <- _elementType,
		elementName <- _elementName,
		description <- _description
	)
	do {
		t;
	}
}