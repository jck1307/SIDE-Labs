<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     ${velocity_currentDate}                                    

     ${velocity_projectName} builder    
     project to build zip contening all needs
                   
     generated build file by SIDE
     ====================================================================== -->
<project name="${velocity_projectName}" default="applyConfig">
	<description>
	            project to build zip contening all needs
	</description>
	<eclipse.convertPath resourcepath="/${velocity_projectName}/src/models/application/build.xml" property="applicationBuildFile" />

	<available property="applicationBuildFileExist" type="file" file="${applicationBuildFile}" />
	<property name="configurationName" value="${ant.project.name}" />

	<import file="${applicationBuildFile}" optional="true" />

	<!-- properties -->
	<tstamp>
		<format property="NOW_FR" pattern="yyyy-MM-dd_HH-mm" locale="fr,FR" />
	</tstamp>
	<property file="build.${user.name}.properties" />


	<!-- project information -->
	<property name="moduleId" value="${ant.project.name}" />
	<property name="version.build" value="1.0" />

	<!-- file and directory paths -->
	<property name="buildName" value="${ant.project.name}_${version.build}" />
	<property name="buildPath" value="${basedir}/build/${buildName}" />
	<property name="alfrescoVersion" value="alfresco_3.x" />
	<property name="tomcatPatch" value="${buildPath}-[${config}]_${NOW_FR}.zip" />
	<property name="configPath" value="${basedir}/src/configs/${config}" />
	<property name="commonConfigPath" value="${basedir}/src/configs/commonConf" />
	<property name="modulesHome" value="${basedir}/src/modules" />
	<property name="projectHome" value="${modulesHome}/mavenProjects" />
	<property name="technoVersion" value="${basedir}/build/generated/${alfrescoVersion}" />
	<property name="alfrescoModules" value="${buildPath}/alfrescoModules" />
	<property name="shareModules" value="${buildPath}/shareModules" />

	<!-- read configuration to extract tomcat location -->
	<side.setPropertyFromConfiguration antproperty="tomcat.home" applicationfile="${application}" configurationname="${configurationName}" parameterid="CATALINA_HOME" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: check-properties                      
         - - - - - - - - - - - - - - - - - -->
	<target name="check-properties" depends="check-property-maven.home, warnForSIDEAntBuildFile">
		<condition property="${velocity_projectName}.fail">
			<or>
				<not>
					<isset property="tomcat.home" />
				</not>
				<not>
					<isset property="applicationBuildFileExist" />
				</not>
			</or>
		</condition>
		<fail if="${velocity_projectName}.fail" message="see previous Error" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: check-property-maven.home                      
         - - - - - - - - - - - - - - - - - -->
	<target name="check-property-maven.home" unless="maven.home">
		<echo message="maven.home not set maven build skipped" level="warning" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: warnForSIDEAntBuildFile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="warnForSIDEAntBuildFile" unless="applicationBuildFileExist">
		<echo message="SIDE PROCESS SKIPED" level="error" />
		<echo message=" PLEASE TO GENERATE Ant Build File from application model" level="error" />
	</target>

	<!-- ================================= 
          target: applyConfig              
         ================================= -->
	<target name="applyConfig" depends="check-properties,patchWars" description="apply configuration to build deployment archive">
		<mkdir dir="${configPath}/${tomcat.webapps.target}/alfresco" />
		<mkdir dir="${configPath}/${tomcat.webapps.target}/share" />
		<mkdir dir="${commonConfigPath}" />

		<copy file="${tomcat.home}/webapps/alfresco.war" tofile="${buildPath}/alfresco.war" failonerror="false" />
		<copy file="${tomcat.home}/webapps/share.war" tofile="${buildPath}/share.war" failonerror="false" />
		<copy file="${tomcat.home}/webapps/xforms.war" tofile="${buildPath}/xforms.war" failonerror="false" />
		<copy file="${tomcat.home}/webapps/side-demo.war" tofile="${buildPath}/side-demo.war" failonerror="false" />
		<copy file="${tomcat.home}/webapps/facetmap.war" tofile="${buildPath}/facetmap.war" failonerror="false" />

		<condition property="xforms-war-exists">
			<and>
				<available type="file" file="${buildPath}/xforms.war" />
				<available type="dir" file="${configPath}/${tomcat.webapps.target}/xforms" />
			</and>
		</condition>
		<available type="dir" file="${commonConfigPath}/${tomcat.webapps.target}/xforms" property="xforms-commonConf"/>
		
		<condition property="alfresco-war-exists">
			<and>
				<available type="file" file="${buildPath}/alfresco.war" />
				<available type="dir" file="${configPath}/${tomcat.webapps.target}/alfresco" />
			</and>
		</condition>
		<available type="dir" file="${commonConfigPath}/${tomcat.webapps.target}/alfresco" property="alfresco-commonConf"/>
		
		<condition property="share-war-exists">
			<and>
				<available type="file" file="${buildPath}/share.war" />
				<available type="dir" file="${configPath}/${tomcat.webapps.target}/share" />
			</and>
		</condition>
		<available type="dir" file="${commonConfigPath}/${tomcat.webapps.target}/share" property="share-commonConf" />
		
		<condition property="side-demo-war-exists">
			<and>
				<available type="file" file="${buildPath}/side-demo.war" />
				<available type="dir" file="${configPath}/${tomcat.webapps.target}/side-demo" />
			</and>
		</condition>
		<available type="dir" file="${commonConfigPath}/${tomcat.webapps.target}/side-demo" property="side-demo-commonConf" />
		
		<condition property="facetmap-war-exists">
			<and>
				<available type="file" file="${buildPath}/facetmap.war" />
				<available type="dir" file="${configPath}/${tomcat.webapps.target}/facetmap" />
			</and>
		</condition>
		<available type="dir" file="${commonConfigPath}/${tomcat.webapps.target}/facetmap" property="facetmap-commonConf" />

		<!-- patch war-->
		<antcall target="update-alfresco.war" />
		<antcall target="update-share.war" />
		<antcall target="update-xforms.war" />
		<antcall target="update-side-demo.war" />
		<antcall target="update-facetmap.war" />

		<!-- make final tomcat patch -->
		<zip destfile="${tomcatPatch}" comment="Build date: ${NOW_FR} \nunzip in tomcat home directory, delete alfresco and shared explosed webapps">
			<zipfileset dir="${configPath}">
				<exclude name="${tomcat.webapps.target}/**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}">
				<exclude name="**" if="shared_configConf.disable" />
				<exclude name="webapps" />
			</zipfileset>
			<zipfileset dir="${buildPath}" prefix="${tomcat.webapps.target}">
				<include name="*.war" />
			</zipfileset>
			<zipfileset file="${basedir}/src/README.txt" />
		</zip>
	</target>

	<!-- ================================= 
          target: cleanAllBuilds              
         ================================= -->
	<target name="cleanAllBuilds" depends="" description="delete build directory">
		<delete dir="${basedir}/build" quiet="true" />
	</target>

	<!-- ================================= 
          target: buildAll              
         ================================= -->
	<target name="buildAll" depends="clean, build, copyForSideDeployer" description="project to build zip contening all needs">
		<antcall target="side-generate" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copyForSideDeployer                      
    	- - - - - - - - - - - - - - - - - -->
	<target name="copyForSideDeployer">
		<copy todir="${technoVersion}" failonerror="false" flatten="true">
			<fileset dir="${modulesHome}" id="id">
				<include name="**/*.amp" />
				<include name="**/*.zip" />
			</fileset>
		</copy>
		<copy file="${basedir}/src/README.txt" todir="${buildPath}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete dir="${buildPath}" verbose="true" />
		<delete file="${buildPath}.zip" failonerror="true" />
		<delete dir="${basedir}/build" />
		<antcall target="maven-clean" />
		<eclipse.incrementalBuild kind="clean" />
		<antcall target="side-clean" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: build                      
         - - - - - - - - - - - - - - - - - -->
	<target name="build">
		<antcall target="maven-install" />
		<eclipse.incrementalBuild kind="full" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: side-clean                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="side-clean" if="applicationBuildFileExist">
		<antcall target="${configurationName}-clean" />
	</target>
	<!-- - - - - - - - - - - - - - - - - - 
          target: side-generate                      
         - - - - - - - - - - - - - - - - - -->
	<target name="side-generate" if="applicationBuildFileExist">
		<antcall target="${configurationName}-generate" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: side-deploy                      
         - - - - - - - - - - - - - - - - - -->
	<target name="side-deploy" if="applicationBuildFileExist">
		<antcall target="${configurationName}-deploy" />
	</target>

	<!-- ================================= 
          target: patchWars              
         ================================= -->
	<target name="patchWars" depends="buildAll">
		<!-- Beware deployer must to patch war file not exploded directory -->
		<antcall target="side-deploy" />
		<eclipse.refreshLocal resource="${ant.project.name}" depth="infinite" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: update-alfresco.war                      
         - - - - - - - - - - - - - - - - - -->
	<target name="update-alfresco.war" if="alfresco-war-exists">
		<zip destfile="${buildPath}/alfresco.war" update="true" whenempty="skip">
			<zipfileset dir="${configPath}/${tomcat.webapps.target}/alfresco">
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}/webapps/alfresco" >
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: update-share.war                      
         - - - - - - - - - - - - - - - - - -->
	<target name="update-share.war" if="share-war-exists">
		<zip destfile="${buildPath}/share.war" update="true" whenempty="skip">
			<zipfileset dir="${configPath}/${tomcat.webapps.target}/share">
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}/webapps/share">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: update-xforms.war                      
         - - - - - - - - - - - - - - - - - -->
	<target name="update-xforms.war" if="xforms-war-exists">
		<zip destfile="${buildPath}/xforms.war" update="true" whenempty="skip">
			<zipfileset dir="${configPath}/${tomcat.webapps.target}/xforms">
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}/webapps/xforms">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: update-side-demo.war                      
         - - - - - - - - - - - - - - - - - -->
	<target name="update-side-demo.war" if="side-demo-war-exists">
		<zip destfile="${buildPath}/side-demo.war" update="true" whenempty="skip">
			<zipfileset dir="${configPath}/${tomcat.webapps.target}/side-demo">
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}/webapps/side-demo">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: update-facetmap.war                      
         - - - - - - - - - - - - - - - - - -->
	<target name="update-facetmap.war" if="facetmap-war-exists">
		<zip destfile="${buildPath}/facetmap.war" update="true" whenempty="skip">
			<zipfileset dir="${configPath}/${tomcat.webapps.target}/facetmap">
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}/webapps/facetmap">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- ================================= 
          target: install              
         ================================= -->
	<target name="install" depends="applyConfig" description="install project package including wars and configuration files in tomcat">
		<!-- create shared backup -->
		<property name="shared.org" value="shared.org" />
		<available property="shared.bk" type="dir" file="${tomcat.home}/${shared.org}">

		</available>
		<!-- make a backup of tomcat shared folder -->
		<copy todir="${tomcat.home}/${shared.org}">
			<fileset dir="${tomcat.home}/shared">
				<include name="**/**" unless="shared.bk" />
			</fileset>
		</copy>

		<!-- restore from backup-->
		<delete dir="${tomcat.home}/shared" />
		<copy todir="${tomcat.home}/shared" verbose="true">
			<fileset dir="${tomcat.home}/${shared.org}">
				<include name="**/**" />
			</fileset>
		</copy>
		<delete verbose="true">
			<fileset dir="${tomcat.home}/webapps">
				<include name="alfresco.war" />
				<include name="share.war" />
				<include name="xforms.war" />
				<include name="side-demo.war" />
				<include name="facetmap.war" />
			</fileset>
		</delete>
		<delete dir="${tomcat.home}/webapps/alfresco" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/webapps/share" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/webapps/xforms" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/webapps/side-demo" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/webapps/facetmap" verbose="true" quiet="true" />
		<!-- unzip shared, and webapps -->
		<unzip dest="${tomcat.home}" src="${tomcatPatch}" overwrite="true" />
	</target>


	<!-- Task that need maven2 -->


	<!-- - - - - - - - - - - - - - - - - - 
          target: maven-install                      
         - - - - - - - - - - - - - - - - - -->
	<target name="maven-install" if="maven.home">
		<maven basedir="${projectHome}" options="" goal="install" resultproperty="maven.build.result" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: maven-clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="maven-clean" if="maven.home">
		<maven basedir="${projectHome}" options="" goal="clean" resultproperty="maven.build.result" />
	</target>

	<!-- ========
			this macro call maven installed on your system, so maven.home must be set
		 ======== -->
	<macrodef name="maven">
		<attribute name="options" default="" />
		<attribute name="goal" />
		<attribute name="basedir" />
		<attribute name="resultproperty" default="maven.result" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{basedir}" resultproperty="@{resultproperty}">
				<jvmarg value="-Xmx512m" />
				<classpath>
					<fileset dir="${maven.home}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${maven.home}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
			<echo message="exit code : ${maven.build.result}" />
		</sequential>
	</macrodef>

</project>
